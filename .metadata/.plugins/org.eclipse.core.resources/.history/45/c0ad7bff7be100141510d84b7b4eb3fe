package cs21120.assignment2.solution;

import java.awt.Point;
import java.util.LinkedList;
import java.util.concurrent.PriorityBlockingQueue;

import cs21120.assignment2.FloatImage;
import cs21120.assignment2.ISnapper;

public class Chh57Snapper implements ISnapper {

	// The below boolean will be of the same size as the pixels in the image
	private boolean[][] visited;
	private Point[][] map;

	public LinkedList<Point> getPath(int arg0, int arg1) {
		// TODO Auto-generated method stub
		return null;
	}

	// @param The neighborPixels variable is the array of pixels next to the mouse coords
	// @param xCoord is the x coordinates of the mouse click
	// @param yCoord is the y coordinates of the mouse click
	public void setSeed(int xCoord, int yCoord, FloatImage[] neighborPixels) {
		final PriorityBlockingQueue<Edge> edges = new PriorityBlockingQueue<Edge>();
		/*
		 * neighborPixels: 0 is east 1 is northeast, 2 north, 3 northwest
		 */
		
		visited = new boolean[neighborPixels[0].getWidth()][neighborPixels[0].getHeight()];
		map = new Point[neighborPixels[0].getWidth()][neighborPixels[0].getHeight()];
		edges.add(new Edge(null, new Point(xCoord ,yCoord), 0));
		Runnable run = new Runnable(){

			public void run() {
				// TODO Auto-generated method stub
				
			}
			
		};
		Thread thisThread = new Thread(run);
		thisThread.start();
	}
	
	public void mapBuilding(PriorityBlockingQueue<Edge> eQueue){
		while(!eQueue.isEmpty()){
			try {
				Edge thisEdge = eQueue.take();
				if (!(checkBounds(thisEdge.destination.x, thisEdge.destination.y))){
					
				}
				visited[thisEdge.destination.x][thisEdge.destination.y] = true;
			} catch (InterruptedException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			
		}
	}
	
	private boolean checkBounds(int xCoord, int yCoord){
		return xCoord < map.length && yCoord < map[0].length && xCoord >= 0 && yCoord >= 0;
	}
	
	
	// @param inner class for edge

	private class Edge implements Comparable<Edge> {

		private Point start, destination;
		private float weight;

		public Edge(Point s, Point d, float w) {
			this.start = s;
			this.destination = d;
			this.weight = w;
		}

		public int compareTo(Edge otherEdge) {
			// TODO Auto-generated method stub
			return Float.valueOf(weight).compareTo(otherEdge.weight);
		}

	}

}
