package cs21120.assignment2.solution;

import java.awt.Point;
import java.util.LinkedList;
import java.util.concurrent.PriorityBlockingQueue;

import cs21120.assignment2.FloatImage;
import cs21120.assignment2.ISnapper;

public class Chh57Snapper implements ISnapper {

	// The below boolean will be of the same size as the pixels in the image
	// 2d array for visited nodes
	private boolean[][] visited;
	// 2d array for the map
	private Point[][] map;
	// array for the floatImages that can be manipulated as the program continues
	private FloatImage[] floatImages;

	// @param xCoord is the x coordinate of the current path
	// @param yCoord is the y coordinate of the current path
	public LinkedList<Point> getPath(int xCoord, int yCoord) {
		// if the current location is in bounds
		if (checkBounds(xCoord, yCoord)) {
			// and it has been visited
			if (visited[xCoord][yCoord]) {
				// create a new linked list of points
				LinkedList<Point> myNodes = new LinkedList<Point>();
				// create a new point which is of location that has been passed in within parameters
				Point nextNode = map[xCoord][yCoord];
				// and while it exists
				while (nextNode != null) {
					// add to the linked list of points
					myNodes.add(new Point(nextNode));
					// assigns the next node
					nextNode = map[nextNode.x][nextNode.y];
				}
				// which will eventually return the path
				return myNodes;
			} else {
				return null;
			}
		} else {
			return null;
		}

	}

	// @param The neighborImages variable is the array of pixels next to the mouse coords
	// @param xCoord is the x coordinates of the mouse click
	// @param yCoord is the y coordinates of the mouse click
	public void setSeed(int xCoord, int yCoord, FloatImage[] neighborImages) {
		final PriorityBlockingQueue<Edge> edges = new PriorityBlockingQueue<Edge>();
		/*
		 * neighborPixels: 0 is east 1 is northeast, 2 north, 3 northwest
		 */
		floatImages = neighborImages;
		// set the seed to visited
		visited = new boolean[neighborImages[0].getWidth()][neighborImages[0]
				.getHeight()];
		// allocate the seed as a new point within map
		map = new Point[neighborImages[0].getWidth()][neighborImages[0]
				.getHeight()];
		// add this location to the list of edges
		edges.add(new Edge(null, new Point(xCoord, yCoord), 0));
		Runnable run = new Runnable() {

			public void run() {
				// run the method to build the edges and establish locations of floatimages
				mapBuilding(edges);
			}

		};
		Thread thisThread = new Thread(run);
		thisThread.start();
	}

	public void mapBuilding(PriorityBlockingQueue<Edge> eQueue) {
		Edge newEdge;
		float weight;
		try {
			while (!eQueue.isEmpty()) {
				// take an edge off the top of the queue
				Edge thisEdge = eQueue.take();
				// if the position is in bounds
				if (!(checkBounds(thisEdge.destination.x,
						thisEdge.destination.y))) {
					continue;
				}
				// if the position has not been visited
				if (visited[thisEdge.destination.x][thisEdge.destination.y]) {
					continue;
				}
				// set it to visited
				visited[thisEdge.destination.x][thisEdge.destination.y] = true;
				// place the position on map
				map[thisEdge.destination.x][thisEdge.destination.y] = thisEdge.start;

				// ******************* EAST *****************************
				
				weight = setWeight(0, thisEdge);
				newEdge = findEdge(thisEdge, weight, "plus", "null", 1, 0);
				eQueue.add(newEdge);
				
				// ***************** NORTH-EAST **************************
				
				weight = setWeight(1, thisEdge);
				newEdge = findEdge(thisEdge, weight, "plus", "plus", 1, 1);
				eQueue.add(newEdge);
				
				// ******************* NORTH *****************************
				
				weight = setWeight(2, thisEdge);
				newEdge = findEdge(thisEdge, weight, "null", "plus", 0, 1);
				eQueue.add(newEdge);
				
				// ***************** NORTH-WEST **************************
				
				weight = setWeight(3, thisEdge);
				newEdge = findEdge(thisEdge, weight, "minus", "plus", 1, 1);
				eQueue.add(newEdge);

				// *******************************************************
				
				
				// **************** REVERSE DIRECTIONS *******************
				
				// check whether the edge in question is within boundaries
				if ((checkBounds(thisEdge.destination.x - 1,
						thisEdge.destination.y)) // west
						&& (checkBounds(thisEdge.destination.x - 1,
								thisEdge.destination.y - 1)) // southwest
						&& (checkBounds(thisEdge.destination.x,
								thisEdge.destination.y - 1) // south
						&& (checkBounds(thisEdge.destination.x + 1,
								thisEdge.destination.y - 1)))) { // southeast

					// ********************** WEST *****************************
					
					weight = setWeight(0, thisEdge);
					newEdge = findEdge(thisEdge, weight, "minus", "null", 1, 0);
					eQueue.add(newEdge);

					// ******************* SOUTH-WEST **************************
					
					weight = setWeight(1, thisEdge);
					newEdge = findEdge(thisEdge, weight, "minus", "minus", 1, 1);
					eQueue.add(newEdge);

					// ********************** SOUTH ****************************
					
					weight = setWeight(2, thisEdge);
					newEdge = findEdge(thisEdge, weight, "null", "minus", 0, 1);
					eQueue.add(newEdge);

					// ******************* SOUTH-EAST **************************
					
					weight = setWeight(3, thisEdge);
					newEdge = findEdge(thisEdge, weight, "plus", "minus", 1, 1);
					eQueue.add(newEdge);
					
					// *********************************************************

				}
			}
		} catch (InterruptedException ie) {
			ie.printStackTrace();
		}
	}

	public float setWeight(int direction, Edge thisEdge) {
		return floatImages[direction].get_nocheck(thisEdge.destination.x,
				thisEdge.destination.y);
	}

	public Edge findEdge(Edge thisEdge, float weight, String xOperator,
			String yOperator, int xMod, int yMod) {
		if (xMod == 0 && yMod == 0) {
			return new Edge(new Point(thisEdge.destination.x,
					thisEdge.destination.y), new Point(thisEdge.destination.x,
					thisEdge.destination.y), weight + thisEdge.weight);
		} else {
			if (xOperator == "null") {
				if (yOperator == "plus") {
					return new Edge(new Point(thisEdge.destination.x,
							thisEdge.destination.y), new Point(
							thisEdge.destination.x,
							thisEdge.destination.y + yMod), weight
							+ thisEdge.weight);
				}
				if (yOperator == "minus") {
					return new Edge(new Point(thisEdge.destination.x,
							thisEdge.destination.y), new Point(
							thisEdge.destination.x,
							thisEdge.destination.y - yMod), weight
							+ thisEdge.weight);
				}
			} else if (xOperator == "plus") {
				if (yOperator == "null") {
					return new Edge(new Point(thisEdge.destination.x,
							thisEdge.destination.y), new Point(
							thisEdge.destination.x + xMod,
							thisEdge.destination.y), weight + thisEdge.weight);
				}
				if (yOperator == "plus") {
					return new Edge(new Point(thisEdge.destination.x,
							thisEdge.destination.y), new Point(
							thisEdge.destination.x + xMod,
							thisEdge.destination.y + yMod), weight
							+ thisEdge.weight);
				}
				if (yOperator == "minus") {
					return new Edge(new Point(thisEdge.destination.x,
							thisEdge.destination.y), new Point(
							thisEdge.destination.x + xMod,
							thisEdge.destination.y - yMod), weight
							+ thisEdge.weight);
				}
			} else if (xOperator == "minus") {
				if (yOperator == "null") {
					return new Edge(new Point(thisEdge.destination.x,
							thisEdge.destination.y), new Point(
							thisEdge.destination.x - xMod,
							thisEdge.destination.y), weight + thisEdge.weight);
				}
				if (yOperator == "plus") {
					return new Edge(new Point(thisEdge.destination.x,
							thisEdge.destination.y), new Point(
							thisEdge.destination.x - xMod,
							thisEdge.destination.y + yMod), weight
							+ thisEdge.weight);
				}
				if (yOperator == "minus") {
					return new Edge(new Point(thisEdge.destination.x,
							thisEdge.destination.y), new Point(
							thisEdge.destination.x - xMod,
							thisEdge.destination.y - yMod), weight
							+ thisEdge.weight);
				}
			}
		}
		return new Edge(new Point(thisEdge.destination.x,
				thisEdge.destination.y), new Point(thisEdge.destination.x - 1,
				thisEdge.destination.y), weight + thisEdge.weight);

	}

	private boolean checkBounds(int xCoord, int yCoord) {
		return xCoord < map.length && yCoord < map[0].length && xCoord >= 0
				&& yCoord >= 0;
	}

	// @param inner class for edge

	private class Edge implements Comparable<Edge> {

		private Point start, destination;
		private float weight;

		public Edge(Point s, Point d, float w) {
			this.start = s;
			this.destination = d;
			this.weight = w;
		}

		public int compareTo(Edge otherEdge) {
			return Float.valueOf(weight).compareTo(otherEdge.weight);
		}

	}

}
